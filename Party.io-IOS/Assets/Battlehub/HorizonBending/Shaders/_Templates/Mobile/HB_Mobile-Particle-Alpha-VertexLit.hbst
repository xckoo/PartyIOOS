// Simplified VertexLit Blended Particle shader. Differences from regular VertexLit Blended Particle one:
// - no AlphaTest
// - no ColorMask

Shader "Battlehub/Mobile/Particles/HB_VertexLit Blended" {
	Properties{
		_EmisColor("Emissive Color", Color) = (.2,.2,.2,0)
		_MainTex("Particle Texture", 2D) = "white" {}

	}

		Category{
			Tags { "Queue" = "Transparent" "IgnoreProjector" = "True" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha
			Cull Off ZWrite Off Fog { Color(0,0,0,0) }

			Lighting On
			//Material { Emission[_EmisColor] }
			//ColorMaterial AmbientAndDiffuse

			SubShader {
				Pass {
				CGPROGRAM
				
				HB_FEATURE
				#pragma vertex vert
				#pragma fragment frag
				#pragma multi_compile_fog
				#include "UnityCG.cginc"
				#include "../CGIncludes/HB_Core.cginc"

				struct v2f {
					float2 uv : TEXCOORD0;
					UNITY_FOG_COORDS(1)
					fixed4 diff : COLOR0;
					float4 pos : SV_POSITION;
				};
	
				uniform fixed4 _EmisColor;
				uniform float4 _MainTex_ST;

				v2f vert(appdata_base v)
				{
					v2f o;
					
					HB(v.vertex)
					o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
					o.uv = TRANSFORM_TEX(v.texcoord,_MainTex);
					float4 diffuse = float4(ShadeVertexLightsFull(v.vertex, v.normal, 4, true) * 0.5, 1.0f);
					o.diff = diffuse + _EmisColor;
					UNITY_TRANSFER_FOG(o, o.pos);
					return o;
				}

				uniform sampler2D _MainTex;

				fixed4 frag(v2f i) : SV_Target	
				{
					fixed4 temp = tex2D(_MainTex, i.uv);
					fixed4 c;
					c.xyz = temp.xyz * i.diff.xyz;
					c.w = temp.w * i.diff.w;
					UNITY_APPLY_FOG(i.fogCoord, c);

					return c;
				}
				ENDCG

				}
			}
	}
	Fallback "Mobile/Particles/VertexLit Blended"
}

