// Simplified VertexLit shader. Differences from regular VertexLit one:
// - no per-material color
// - no specular
// - no emission

Shader "Battlehub/Mobile/HB_VertexLit" {
Properties {
	_MainTex ("Base (RGB)", 2D) = "white" {}
}

Category{
	Tags{ "RenderType" = "Opaque" }
	LOD 80

	SubShader{
	// Vertex Lit, emulated in shaders (4 lights max, no specular)
		Pass{
			Tags{ "LightMode" = "Vertex" }
			Lighting On
			CGPROGRAM
			
			HB_FEATURE
			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fog
			#include "UnityCG.cginc"
			#include "../CGIncludes/HB_Core.cginc"

			struct v2f {
				float2 uv : TEXCOORD0;
				UNITY_FOG_COORDS(1)
				fixed4 diff : COLOR0;
				float4 pos : SV_POSITION;
			};

			uniform float4 _MainTex_ST;

			v2f vert(appdata_base v)
			{
				v2f o;
				
				HB(v.vertex)
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				o.uv = TRANSFORM_TEX(v.texcoord,_MainTex);
				float4 diffuse = float4(ShadeVertexLightsFull(v.vertex, v.normal, 4, true), 1.0f);
				o.diff = diffuse;
				UNITY_TRANSFER_FOG(o, o.pos);
				return o;
			}

			uniform sampler2D _MainTex;
	
			fixed4 frag(v2f i) : SV_Target
			{
				fixed4 temp = tex2D(_MainTex, i.uv);
				fixed4 c = temp * i.diff;
				UNITY_APPLY_FOG(i.fogCoord, c);
				UNITY_OPAQUE_ALPHA(c.a);
				return c;
			}
			ENDCG
		}

		// Lightmapped
		Pass{
			Tags{ "LightMode" = "VertexLM" }

			CGPROGRAM
			
			HB_FEATURE
			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fog

			#include "UnityCG.cginc"
			#include "../CGIncludes/HB_Core.cginc"

			struct v2f {
				half2 uv : TEXCOORD0;
				half2 uv2 : TEXCOORD1;
				UNITY_FOG_COORDS(2)
				float4 pos : SV_POSITION;
			};

			uniform float4 _MainTex_ST;

			v2f vert(float4 vertex : POSITION, float2 uv : TEXCOORD0, float2 uv2 : TEXCOORD1)
			{
				v2f o;
				
				HB(vertex)
				o.pos = mul(UNITY_MATRIX_MVP, vertex);
				o.uv = TRANSFORM_TEX(uv,_MainTex);
				o.uv2 = uv2 * unity_LightmapST.xy + unity_LightmapST.zw;
				UNITY_TRANSFER_FOG(o,o.pos);
				return o;
			}

			uniform sampler2D _MainTex;

			fixed4 frag(v2f i) : SV_Target
			{
				fixed4 lm = UNITY_SAMPLE_TEX2D(unity_Lightmap, i.uv2);
				fixed4 c = tex2D(_MainTex, i.uv);
				c.rgb *= lm.rgb * 2;
				UNITY_APPLY_FOG(i.fogCoord, c);
				UNITY_OPAQUE_ALPHA(c.a);
				return c;
			}
			ENDCG
		}

		// Lightmapped, encoded as RGBM
		Pass{
			Tags{ "LightMode" = "VertexLMRGBM" }

			CGPROGRAM
			
			HB_FEATURE
			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fog

			#include "UnityCG.cginc"
			#include "../CGIncludes/HB_Core.cginc"

			struct v2f {
				half2 uv : TEXCOORD0;
				half2 uv2 : TEXCOORD1;
				UNITY_FOG_COORDS(2)
				float4 pos : SV_POSITION;
			};

			uniform float4 _MainTex_ST;

			v2f vert(float4 vertex : POSITION, float2 uv : TEXCOORD0, float2 uv2 : TEXCOORD1)
			{
				v2f o;
				
				HB(vertex)
				o.pos = mul(UNITY_MATRIX_MVP, vertex);
				o.uv = TRANSFORM_TEX(uv,_MainTex);
				o.uv2 = uv2 * unity_LightmapST.xy + unity_LightmapST.zw;
				UNITY_TRANSFER_FOG(o,o.pos);
				return o;
			}

			uniform sampler2D _MainTex;

			fixed4 frag(v2f i) : SV_Target
			{
				fixed4 lm = UNITY_SAMPLE_TEX2D(unity_Lightmap, i.uv2);
				lm *= lm.a * 2;
				fixed4 c = tex2D(_MainTex, i.uv);
				c.rgb *= lm.rgb * 4;
				UNITY_APPLY_FOG(i.fogCoord, c);
				UNITY_OPAQUE_ALPHA(c.a);
				return c;	
			}
			ENDCG
		}
		// Pass to render object as a shadow caster
		Pass{
			Name "ShadowCaster"
			Tags{ "LightMode" = "ShadowCaster" }

			CGPROGRAM
			HB_FEATURE
			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_shadowcaster
			#include "UnityCG.cginc"
			#include "../CGIncludes/HB_Core.cginc"

				struct v2f {
					V2F_SHADOW_CASTER;
				};

				v2f vert(appdata_base v)
				{
					v2f o;

					
					HB(v.vertex)
					TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
					return o;
				}

				float4 frag(v2f i) : SV_Target
				{
					SHADOW_CASTER_FRAGMENT(i)
				}
			ENDCG
		}
	}
}
Fallback "Legacy Shaders/VertexLit"
}
